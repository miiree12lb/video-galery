{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mirei\\\\Desktop\\\\video-gallery\\\\src\\\\DriveVideoEmbed.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useMediaQuery } from \"react-responsive\";\n// @ts-ignore\nimport \"./css/slider.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DriveVideoEmbed({\n  videoUrl,\n  vertical,\n  title,\n  subtitle,\n  videoId,\n  isPlaying,\n  onPlay,\n  thumbnail\n}) {\n  _s();\n  const isDesktop = useMediaQuery({\n    query: \"(min-width: 801px)\"\n  });\n  let width, height;\n  if (vertical) {\n    width = isDesktop ? \"15vw\" : \"30vw\";\n    height = `${parseFloat(width) * 16 / 9}vw`;\n  } else {\n    height = \"15vw\";\n    width = \"26.6666666666vw\";\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-container\",\n    children: !isPlaying ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"thumbnail-overlay\",\n      style: {\n        width,\n        height,\n        position: \"relative\",\n        cursor: \"pointer\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        backgroundImage: `url(${thumbnail})`,\n        backgroundSize: \"cover\",\n        backgroundPosition: \"center\",\n        borderRadius: \"5px\"\n      },\n      onClick: () => onPlay(videoId),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          backgroundColor: \"rgba(0, 0, 0, 0.5)\",\n          borderRadius: \"50%\",\n          padding: \"10px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: \"#fff\",\n            fontSize: \"1.5em\",\n            margin: 0\n          },\n          children: \"\\u25B6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"iframe\", {\n      id: `iframe-${videoId}`,\n      src: `${videoUrl}`,\n      style: {\n        top: 0,\n        left: 0,\n        width: width,\n        height: height,\n        border: \"none\",\n        borderRadius: \"5px\"\n      },\n      allow: \"autoplay\",\n      allowFullScreen: true,\n      title: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n}\n_s(DriveVideoEmbed, \"OwvWUQgjrMnuU8GZKzxgeJ0yhK4=\", false, function () {\n  return [useMediaQuery];\n});\n_c = DriveVideoEmbed;\nexport default DriveVideoEmbed;\nvar _c;\n$RefreshReg$(_c, \"DriveVideoEmbed\");","map":{"version":3,"names":["React","useMediaQuery","jsxDEV","_jsxDEV","DriveVideoEmbed","videoUrl","vertical","title","subtitle","videoId","isPlaying","onPlay","thumbnail","_s","isDesktop","query","width","height","parseFloat","className","children","style","position","cursor","display","justifyContent","alignItems","backgroundImage","backgroundSize","backgroundPosition","borderRadius","onClick","backgroundColor","padding","color","fontSize","margin","fileName","_jsxFileName","lineNumber","columnNumber","id","src","top","left","border","allow","allowFullScreen","_c","$RefreshReg$"],"sources":["C:/Users/mirei/Desktop/video-gallery/src/DriveVideoEmbed.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\n// @ts-ignore\r\nimport \"./css/slider.css\";\r\n\r\nfunction DriveVideoEmbed({ videoUrl, vertical, title, subtitle, videoId, isPlaying, onPlay, thumbnail }) {\r\n    const isDesktop = useMediaQuery({ query: \"(min-width: 801px)\" });\r\n\r\n    let width, height;\r\n    if (vertical) {\r\n        width = isDesktop ? \"15vw\" : \"30vw\";\r\n        height = `${(parseFloat(width) * 16) / 9}vw`;\r\n    } else {\r\n        height = \"15vw\";\r\n        width = \"26.6666666666vw\";\r\n    }\r\n\r\n    return (\r\n        <div className=\"video-container\">\r\n            {!isPlaying ? (\r\n                <div\r\n                    className=\"thumbnail-overlay\"\r\n                    style={{\r\n                        width,\r\n                        height,\r\n                        position: \"relative\",\r\n                        cursor: \"pointer\",\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        alignItems: \"center\",\r\n                        backgroundImage: `url(${thumbnail})`,\r\n                        backgroundSize: \"cover\",\r\n                        backgroundPosition: \"center\",\r\n                        borderRadius: \"5px\",\r\n                    }}\r\n                    onClick={() => onPlay(videoId)}\r\n                >\r\n                    <div\r\n                        style={{\r\n                            backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n                            borderRadius: \"50%\",\r\n                            padding: \"10px\",\r\n                        }}\r\n                    >\r\n                        <p style={{ color: \"#fff\", fontSize: \"1.5em\", margin: 0 }}>â–¶</p>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <iframe\r\n                    id={`iframe-${videoId}`}\r\n                    src={`${videoUrl}`}\r\n                    style={{\r\n                        top: 0,\r\n                        left: 0,\r\n                        width: width,\r\n                        height: height,\r\n                        border: \"none\",\r\n                        borderRadius: \"5px\",\r\n                    }}\r\n                    allow=\"autoplay\"\r\n                    allowFullScreen\r\n                    title={title}\r\n                ></iframe>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DriveVideoEmbed;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,QAAQ,kBAAkB;AAChD;AACA,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,eAAeA,CAAC;EAAEC,QAAQ;EAAEC,QAAQ;EAAEC,KAAK;EAAEC,QAAQ;EAAEC,OAAO;EAAEC,SAAS;EAAEC,MAAM;EAAEC;AAAU,CAAC,EAAE;EAAAC,EAAA;EACrG,MAAMC,SAAS,GAAGb,aAAa,CAAC;IAAEc,KAAK,EAAE;EAAqB,CAAC,CAAC;EAEhE,IAAIC,KAAK,EAAEC,MAAM;EACjB,IAAIX,QAAQ,EAAE;IACVU,KAAK,GAAGF,SAAS,GAAG,MAAM,GAAG,MAAM;IACnCG,MAAM,GAAG,GAAIC,UAAU,CAACF,KAAK,CAAC,GAAG,EAAE,GAAI,CAAC,IAAI;EAChD,CAAC,MAAM;IACHC,MAAM,GAAG,MAAM;IACfD,KAAK,GAAG,iBAAiB;EAC7B;EAEA,oBACIb,OAAA;IAAKgB,SAAS,EAAC,iBAAiB;IAAAC,QAAA,EAC3B,CAACV,SAAS,gBACPP,OAAA;MACIgB,SAAS,EAAC,mBAAmB;MAC7BE,KAAK,EAAE;QACHL,KAAK;QACLC,MAAM;QACNK,QAAQ,EAAE,UAAU;QACpBC,MAAM,EAAE,SAAS;QACjBC,OAAO,EAAE,MAAM;QACfC,cAAc,EAAE,QAAQ;QACxBC,UAAU,EAAE,QAAQ;QACpBC,eAAe,EAAE,OAAOf,SAAS,GAAG;QACpCgB,cAAc,EAAE,OAAO;QACvBC,kBAAkB,EAAE,QAAQ;QAC5BC,YAAY,EAAE;MAClB,CAAE;MACFC,OAAO,EAAEA,CAAA,KAAMpB,MAAM,CAACF,OAAO,CAAE;MAAAW,QAAA,eAE/BjB,OAAA;QACIkB,KAAK,EAAE;UACHW,eAAe,EAAE,oBAAoB;UACrCF,YAAY,EAAE,KAAK;UACnBG,OAAO,EAAE;QACb,CAAE;QAAAb,QAAA,eAEFjB,OAAA;UAAGkB,KAAK,EAAE;YAAEa,KAAK,EAAE,MAAM;YAAEC,QAAQ,EAAE,OAAO;YAAEC,MAAM,EAAE;UAAE,CAAE;UAAAhB,QAAA,EAAC;QAAC;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/D;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,gBAENrC,OAAA;MACIsC,EAAE,EAAE,UAAUhC,OAAO,EAAG;MACxBiC,GAAG,EAAE,GAAGrC,QAAQ,EAAG;MACnBgB,KAAK,EAAE;QACHsB,GAAG,EAAE,CAAC;QACNC,IAAI,EAAE,CAAC;QACP5B,KAAK,EAAEA,KAAK;QACZC,MAAM,EAAEA,MAAM;QACd4B,MAAM,EAAE,MAAM;QACdf,YAAY,EAAE;MAClB,CAAE;MACFgB,KAAK,EAAC,UAAU;MAChBC,eAAe;MACfxC,KAAK,EAAEA;IAAM;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR;EACZ;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAAC3B,EAAA,CA7DQT,eAAe;EAAA,QACFH,aAAa;AAAA;AAAA+C,EAAA,GAD1B5C,eAAe;AA+DxB,eAAeA,eAAe;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}