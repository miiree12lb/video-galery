{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mirei\\\\Desktop\\\\video-gallery\\\\src\\\\VideoSlider.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport DriveVideoEmbed from \"./DriveVideoEmbed.jsx\";\nimport { useMediaQuery } from \"react-responsive\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VideoSlider({\n  videoList\n}) {\n  _s();\n  const isDesktop = useMediaQuery({\n    query: \"(min-width: 801px)\"\n  });\n  const visibleVideos = isDesktop ? 4 : 2;\n  const [currentPosition, setCurrentPosition] = useState(0);\n  const maxPosition = videoList.length - visibleVideos;\n  const handleNext = () => {\n    setCurrentPosition(prev => prev + visibleVideos > maxPosition ? 0 : prev + visibleVideos);\n  };\n  const handlePrev = () => {\n    setCurrentPosition(prev => prev - visibleVideos < 0 ? maxPosition : prev - visibleVideos);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"arrows-videos-container\",\n    children: [videoList.length > visibleVideos && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"arrows\",\n      onClick: handlePrev,\n      children: \"\\u276E\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"videos-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"videos-slider\",\n        style: {\n          display: \"flex\",\n          gap: \"20px\",\n          overflow: \"hidden\"\n        },\n        children: videoList.slice(currentPosition, currentPosition + visibleVideos).map((video, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-item\",\n          children: /*#__PURE__*/_jsxDEV(DriveVideoEmbed, {\n            videoUrl: video.videoUrl,\n            vertical: video.vertical,\n            title: video.title,\n            subtitle: video.subtitle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), videoList.length > visibleVideos && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"arrows\",\n      onClick: handleNext,\n      children: \"\\u276F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n}\n_s(VideoSlider, \"aCU5MPOahKbsVwAuk8WPeXelXgo=\", false, function () {\n  return [useMediaQuery];\n});\n_c = VideoSlider;\nexport default VideoSlider;\nvar _c;\n$RefreshReg$(_c, \"VideoSlider\");","map":{"version":3,"names":["React","useState","useRef","DriveVideoEmbed","useMediaQuery","jsxDEV","_jsxDEV","VideoSlider","videoList","_s","isDesktop","query","visibleVideos","currentPosition","setCurrentPosition","maxPosition","length","handleNext","prev","handlePrev","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","display","gap","overflow","slice","map","video","index","videoUrl","vertical","title","subtitle","_c","$RefreshReg$"],"sources":["C:/Users/mirei/Desktop/video-gallery/src/VideoSlider.jsx"],"sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport DriveVideoEmbed from \"./DriveVideoEmbed.jsx\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\n\r\nfunction VideoSlider({ videoList }) {\r\n    const isDesktop = useMediaQuery({ query: \"(min-width: 801px)\" });\r\n    const visibleVideos = isDesktop ? 4 : 2;\r\n\r\n    const [currentPosition, setCurrentPosition] = useState(0);\r\n\r\n    const maxPosition = videoList.length - visibleVideos;\r\n\r\n    const handleNext = () => {\r\n        setCurrentPosition((prev) => (prev + visibleVideos > maxPosition ? 0 : prev + visibleVideos));\r\n    };\r\n\r\n    const handlePrev = () => {\r\n        setCurrentPosition((prev) => (prev - visibleVideos < 0 ? maxPosition : prev - visibleVideos));\r\n    };\r\n\r\n    return (\r\n        <div className=\"arrows-videos-container\">\r\n            {videoList.length > visibleVideos && (\r\n                <button\r\n                    className=\"arrows\"\r\n                    onClick={handlePrev}\r\n                >\r\n                    &#10094;\r\n                </button>\r\n            )}\r\n\r\n            <div className=\"videos-container\">\r\n                <div\r\n                    className=\"videos-slider\"\r\n                    style={{\r\n                        display: \"flex\",\r\n                        gap: \"20px\",\r\n                        overflow: \"hidden\",\r\n                    }}\r\n                >\r\n                    {videoList.slice(currentPosition, currentPosition + visibleVideos).map((video, index) => (\r\n                        <div key={index} className=\"video-item\">\r\n                            <DriveVideoEmbed\r\n                                videoUrl={video.videoUrl}\r\n                                vertical={video.vertical}\r\n                                title={video.title}\r\n                                subtitle={video.subtitle}\r\n                            />\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {videoList.length > visibleVideos && (\r\n                <button\r\n                    className=\"arrows\"\r\n                    onClick={handleNext}\r\n                >\r\n                    &#10095;\r\n                </button>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VideoSlider;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}