{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mirei\\\\Desktop\\\\video-gallery\\\\src\\\\DriveVideoEmbed.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DriveVideoEmbed({\n  videoUrl,\n  videoId,\n  isPlaying,\n  thumbnail\n}) {\n  _s();\n  const iframeRef = useRef(null);\n  useEffect(() => {\n    if (iframeRef.current) {\n      const message = isPlaying ? '{\"event\":\"command\",\"func\":\"playVideo\",\"args\":\"\"}' : '{\"event\":\"command\",\"func\":\"pauseVideo\",\"args\":\"\"}';\n      iframeRef.current.contentWindow.postMessage(message, \"*\");\n    }\n  }, [isPlaying]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"drive-video-embed\",\n    children: [thumbnail && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: thumbnail,\n      alt: \"Video thumbnail\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(\"iframe\", {\n      ref: iframeRef,\n      id: `iframe-${videoId}`,\n      src: videoUrl,\n      frameBorder: \"0\",\n      allow: \"autoplay; encrypted-media\",\n      allowFullScreen: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n}\n_s(DriveVideoEmbed, \"xrPm9S+7ob9FwtLVsZjNguOLSgs=\");\n_c = DriveVideoEmbed;\nexport default DriveVideoEmbed;\nvar _c;\n$RefreshReg$(_c, \"DriveVideoEmbed\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","DriveVideoEmbed","videoUrl","videoId","isPlaying","thumbnail","_s","iframeRef","current","message","contentWindow","postMessage","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","ref","id","frameBorder","allow","allowFullScreen","_c","$RefreshReg$"],"sources":["C:/Users/mirei/Desktop/video-gallery/src/DriveVideoEmbed.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\n\r\nfunction DriveVideoEmbed({ videoUrl, videoId, isPlaying, thumbnail }) {\r\n    const iframeRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (iframeRef.current) {\r\n            const message = isPlaying\r\n                ? '{\"event\":\"command\",\"func\":\"playVideo\",\"args\":\"\"}'\r\n                : '{\"event\":\"command\",\"func\":\"pauseVideo\",\"args\":\"\"}';\r\n            iframeRef.current.contentWindow.postMessage(message, \"*\");\r\n        }\r\n    }, [isPlaying]);\r\n\r\n    return (\r\n        <div className=\"drive-video-embed\">\r\n            {thumbnail && <img src={thumbnail} alt=\"Video thumbnail\" />}\r\n            <iframe\r\n                ref={iframeRef}\r\n                id={`iframe-${videoId}`}\r\n                src={videoUrl}\r\n                frameBorder=\"0\"\r\n                allow=\"autoplay; encrypted-media\"\r\n                allowFullScreen\r\n            ></iframe>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DriveVideoEmbed;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,SAASC,eAAeA,CAAC;EAAEC,QAAQ;EAAEC,OAAO;EAAEC,SAAS;EAAEC;AAAU,CAAC,EAAE;EAAAC,EAAA;EAClE,MAAMC,SAAS,GAAGT,MAAM,CAAC,IAAI,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACZ,IAAIU,SAAS,CAACC,OAAO,EAAE;MACnB,MAAMC,OAAO,GAAGL,SAAS,GACnB,kDAAkD,GAClD,mDAAmD;MACzDG,SAAS,CAACC,OAAO,CAACE,aAAa,CAACC,WAAW,CAACF,OAAO,EAAE,GAAG,CAAC;IAC7D;EACJ,CAAC,EAAE,CAACL,SAAS,CAAC,CAAC;EAEf,oBACIJ,OAAA;IAAKY,SAAS,EAAC,mBAAmB;IAAAC,QAAA,GAC7BR,SAAS,iBAAIL,OAAA;MAAKc,GAAG,EAAET,SAAU;MAACU,GAAG,EAAC;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC3DnB,OAAA;MACIoB,GAAG,EAAEb,SAAU;MACfc,EAAE,EAAE,UAAUlB,OAAO,EAAG;MACxBW,GAAG,EAAEZ,QAAS;MACdoB,WAAW,EAAC,GAAG;MACfC,KAAK,EAAC,2BAA2B;MACjCC,eAAe;IAAA;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEd;AAACb,EAAA,CAzBQL,eAAe;AAAAwB,EAAA,GAAfxB,eAAe;AA2BxB,eAAeA,eAAe;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}